{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux'; //import thunk from 'redux-thunk';\n\nimport { createLogger } from \"redux-logger\";\nimport { promiseMiddleware, localStorageMiddleware } from \"./middleware\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport createRootReducer from './reducer'; // Build the middleware for intercepting and dispatching navigation actions\n\nvar myRouterMiddleware = routerMiddleware(null);\n\nvar getMiddleware = function getMiddleware() {\n  if (false) {\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware);\n  } else {\n    // Enable additional logging in non-production environments.\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware, createLogger());\n  }\n};\n\nexport var store = function store() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  //return createStore(createRootReducer(), initialState, getMiddleware());\n  return createStore(createRootReducer(), initialState, getMiddleware());\n};","map":{"version":3,"sources":["/Users/hungtq/Workspace/OpenSources/nextjs-redux-template/lib/store.ts"],"names":["createStore","applyMiddleware","createLogger","promiseMiddleware","localStorageMiddleware","routerMiddleware","createRootReducer","myRouterMiddleware","getMiddleware","store","initialState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C,C,CACA;;AAEA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,iBAAT,EAA4BC,sBAA5B,QAA0D,cAA1D;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AAEA,OAAOC,iBAAP,MAA8B,WAA9B,C,CAEA;;AACA,IAAMC,kBAAkB,GAAGF,gBAAgB,CAAC,IAAD,CAA3C;;AAEA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,aAA2C;AACzC,WAAOP,eAAe,CAACM,kBAAD,EAAqBJ,iBAArB,EAAwCC,sBAAxC,CAAtB;AACD,GAFD,MAEO;AACL;AACA,WAAOH,eAAe,CAACM,kBAAD,EAAqBJ,iBAArB,EAAwCC,sBAAxC,EAAgEF,YAAY,EAA5E,CAAtB;AACD;AACF,CAPD;;AASA,OAAO,IAAMO,KAAK,GAAG,SAARA,KAAQ,GAAuB;AAAA,MAAtBC,YAAsB,uEAAP,EAAO;AAC1C;AACA,SAAOV,WAAW,CAACM,iBAAiB,EAAlB,EAAsBI,YAAtB,EAAoCF,aAAa,EAAjD,CAAlB;AACD,CAHM","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\n//import thunk from 'redux-thunk';\n\nimport { createLogger } from \"redux-logger\"\nimport { promiseMiddleware, localStorageMiddleware } from \"./middleware\";\nimport { routerMiddleware } from \"connected-react-router\"\n\nimport createRootReducer from './reducer';\n\n// Build the middleware for intercepting and dispatching navigation actions\nconst myRouterMiddleware = routerMiddleware(null);\n\nconst getMiddleware = () => {\n  if (process.env.NODE_ENV === 'production') {\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware);\n  } else {\n    // Enable additional logging in non-production environments.\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware, createLogger());\n  }\n};\n\nexport const store = (initialState = {}) => {\n  //return createStore(createRootReducer(), initialState, getMiddleware());\n  return createStore(createRootReducer(), initialState, getMiddleware());\n};"]},"metadata":{},"sourceType":"module"}