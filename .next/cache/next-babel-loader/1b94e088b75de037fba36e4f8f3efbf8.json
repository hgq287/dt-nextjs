{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper'; //import thunk from 'redux-thunk';\n\nimport { createLogger } from \"redux-logger\";\nimport { promiseMiddleware, localStorageMiddleware } from \"./middleware\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport createRootReducer from './reducer'; // Build the middleware for intercepting and dispatching navigation actions\n\nvar myRouterMiddleware = routerMiddleware(null);\n\nvar getMiddleware = function getMiddleware() {\n  if (false) {\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware);\n  } else {\n    // Enable additional logging in non-production environments.\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware, createLogger());\n  }\n};\n\n// export const store = (initialState = {}) => {\n//   //return createStore(createRootReducer(), initialState, getMiddleware());\n//   return createStore(createRootReducer(), initialState);\n// };\n// create a makeStore function\nvar makeStore = function makeStore(context) {\n  return createStore(createRootReducer());\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/Users/hungtq/Workspace/OpenSources/nextjs-redux-template/lib/store.ts"],"names":["createStore","applyMiddleware","createWrapper","createLogger","promiseMiddleware","localStorageMiddleware","routerMiddleware","createRootReducer","myRouterMiddleware","getMiddleware","makeStore","context","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAAmBC,aAAnB,QAAyD,oBAAzD,C,CACA;;AAEA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,iBAAT,EAA4BC,sBAA5B,QAA0D,cAA1D;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AAEA,OAAOC,iBAAP,MAA8B,WAA9B,C,CAEA;;AACA,IAAMC,kBAAkB,GAAGF,gBAAgB,CAAC,IAAD,CAA3C;;AAEA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,aAA2C;AACzC,WAAOR,eAAe,CAACO,kBAAD,EAAqBJ,iBAArB,EAAwCC,sBAAxC,CAAtB;AACD,GAFD,MAEO;AACL;AACA,WAAOJ,eAAe,CAACO,kBAAD,EAAqBJ,iBAArB,EAAwCC,sBAAxC,EAAgEF,YAAY,EAA5E,CAAtB;AACD;AACF,CAPD;;AAYA;AACA;AACA;AACA;AAEA;AACA,IAAMO,SAA2B,GAAG,SAA9BA,SAA8B,CAACC,OAAD;AAAA,SAAsBX,WAAW,CAACO,iBAAiB,EAAlB,CAAjC;AAAA,CAApC,C,CAEA;;;AACA,OAAO,IAAMK,OAAO,GAAGV,aAAa,CAAQQ,SAAR,EAAmB;AAACG,EAAAA,KAAK,EAAE;AAAR,CAAnB,CAA7B","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport {MakeStore, createWrapper, Context, HYDRATE} from 'next-redux-wrapper';\n//import thunk from 'redux-thunk';\n\nimport { createLogger } from \"redux-logger\"\nimport { promiseMiddleware, localStorageMiddleware } from \"./middleware\";\nimport { routerMiddleware } from \"connected-react-router\"\n\nimport createRootReducer from './reducer';\n\n// Build the middleware for intercepting and dispatching navigation actions\nconst myRouterMiddleware = routerMiddleware(null);\n\nconst getMiddleware = () => {\n  if (process.env.NODE_ENV === 'production') {\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware);\n  } else {\n    // Enable additional logging in non-production environments.\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware, createLogger());\n  }\n};\n\nexport interface State {\n}\n\n// export const store = (initialState = {}) => {\n//   //return createStore(createRootReducer(), initialState, getMiddleware());\n//   return createStore(createRootReducer(), initialState);\n// };\n\n// create a makeStore function\nconst makeStore: MakeStore<State> = (context: Context) => createStore(createRootReducer());\n\n// export an assembled wrapper\nexport const wrapper = createWrapper<State>(makeStore, {debug: true});"]},"metadata":{},"sourceType":"module"}